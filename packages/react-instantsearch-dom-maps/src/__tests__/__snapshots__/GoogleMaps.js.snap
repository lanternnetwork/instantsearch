// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`GoogleMaps expect render correctly with the map rendered 1`] = `
<div
  className="ais-GeoSearch"
>
  <div
    className="ais-GeoSearch-map"
  />
</div>
`;

exports[`GoogleMaps expect render correctly with the map rendered 2`] = `
<div
  className="ais-GeoSearch"
>
  <div
    className="ais-GeoSearch-map"
  />
  <ContextProvider
    value={
      {
        "google": {
          "maps": {
            "ControlPosition": {
              "LEFT_TOP": "left:top",
            },
            "LatLng": [MockFunction],
            "LatLngBounds": [MockFunction],
            "Map": [MockFunction] {
              "calls": [
                [
                  null,
                  {
                    "clickableIcons": false,
                    "fullscreenControl": false,
                    "mapTypeControl": false,
                    "streetViewControl": false,
                    "zoomControlOptions": {
                      "position": "left:top",
                    },
                  },
                ],
              ],
              "results": [
                {
                  "type": "return",
                  "value": {
                    "addListener": [MockFunction] {
                      "calls": [
                        [
                          "center_changed",
                          [Function],
                        ],
                        [
                          "zoom_changed",
                          [Function],
                        ],
                        [
                          "dragstart",
                          [Function],
                        ],
                        [
                          "idle",
                          [Function],
                        ],
                      ],
                      "results": [
                        {
                          "type": "return",
                          "value": {
                            "remove": [MockFunction],
                          },
                        },
                        {
                          "type": "return",
                          "value": {
                            "remove": [MockFunction],
                          },
                        },
                        {
                          "type": "return",
                          "value": {
                            "remove": [MockFunction],
                          },
                        },
                        {
                          "type": "return",
                          "value": {
                            "remove": [MockFunction],
                          },
                        },
                      ],
                    },
                    "fitBounds": [MockFunction],
                    "getBounds": [MockFunction],
                    "getCenter": [MockFunction],
                    "getProjection": [MockFunction],
                    "getZoom": [MockFunction],
                    "setCenter": [MockFunction] {
                      "calls": [
                        [
                          {
                            "lat": 0,
                            "lng": 0,
                          },
                        ],
                      ],
                      "results": [
                        {
                          "type": "return",
                          "value": undefined,
                        },
                      ],
                    },
                    "setZoom": [MockFunction] {
                      "calls": [
                        [
                          1,
                        ],
                      ],
                      "results": [
                        {
                          "type": "return",
                          "value": undefined,
                        },
                      ],
                    },
                  },
                },
              ],
            },
            "Marker": [MockFunction],
            "OverlayView": [Function],
            "event": {
              "addListenerOnce": [MockFunction] {
                "calls": [
                  [
                    {
                      "addListener": [MockFunction] {
                        "calls": [
                          [
                            "center_changed",
                            [Function],
                          ],
                          [
                            "zoom_changed",
                            [Function],
                          ],
                          [
                            "dragstart",
                            [Function],
                          ],
                          [
                            "idle",
                            [Function],
                          ],
                        ],
                        "results": [
                          {
                            "type": "return",
                            "value": {
                              "remove": [MockFunction],
                            },
                          },
                          {
                            "type": "return",
                            "value": {
                              "remove": [MockFunction],
                            },
                          },
                          {
                            "type": "return",
                            "value": {
                              "remove": [MockFunction],
                            },
                          },
                          {
                            "type": "return",
                            "value": {
                              "remove": [MockFunction],
                            },
                          },
                        ],
                      },
                      "fitBounds": [MockFunction],
                      "getBounds": [MockFunction],
                      "getCenter": [MockFunction],
                      "getProjection": [MockFunction],
                      "getZoom": [MockFunction],
                      "setCenter": [MockFunction] {
                        "calls": [
                          [
                            {
                              "lat": 0,
                              "lng": 0,
                            },
                          ],
                        ],
                        "results": [
                          {
                            "type": "return",
                            "value": undefined,
                          },
                        ],
                      },
                      "setZoom": [MockFunction] {
                        "calls": [
                          [
                            1,
                          ],
                        ],
                        "results": [
                          {
                            "type": "return",
                            "value": undefined,
                          },
                        ],
                      },
                    },
                    "idle",
                    [Function],
                  ],
                ],
                "results": [
                  {
                    "type": "return",
                    "value": {
                      "remove": [MockFunction],
                    },
                  },
                ],
              },
            },
          },
        },
        "instance": {
          "addListener": [MockFunction] {
            "calls": [
              [
                "center_changed",
                [Function],
              ],
              [
                "zoom_changed",
                [Function],
              ],
              [
                "dragstart",
                [Function],
              ],
              [
                "idle",
                [Function],
              ],
            ],
            "results": [
              {
                "type": "return",
                "value": {
                  "remove": [MockFunction],
                },
              },
              {
                "type": "return",
                "value": {
                  "remove": [MockFunction],
                },
              },
              {
                "type": "return",
                "value": {
                  "remove": [MockFunction],
                },
              },
              {
                "type": "return",
                "value": {
                  "remove": [MockFunction],
                },
              },
            ],
          },
          "fitBounds": [MockFunction],
          "getBounds": [MockFunction],
          "getCenter": [MockFunction],
          "getProjection": [MockFunction],
          "getZoom": [MockFunction],
          "setCenter": [MockFunction] {
            "calls": [
              [
                {
                  "lat": 0,
                  "lng": 0,
                },
              ],
            ],
            "results": [
              {
                "type": "return",
                "value": undefined,
              },
            ],
          },
          "setZoom": [MockFunction] {
            "calls": [
              [
                1,
              ],
            ],
            "results": [
              {
                "type": "return",
                "value": undefined,
              },
            ],
          },
        },
      }
    }
  >
    <div
      testId="children"
    >
      This is the children
    </div>
  </ContextProvider>
</div>
`;

exports[`GoogleMaps expect render correctly without the map rendered 1`] = `
<div
  className="ais-GeoSearch"
>
  <div
    className="ais-GeoSearch-map"
  />
</div>
`;

exports[`GoogleMaps update expect to still render the children when shouldUpdate return false 1`] = `
<div
  className="children"
>
  This is the children
</div>
`;

exports[`GoogleMaps update expect to still render the children when shouldUpdate return false 2`] = `
<div
  className="children"
>
  This is the children updated
</div>
`;
